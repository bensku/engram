import { JSONSchemaType } from 'ajv';
import { OptionType, ToggleOption } from '../chat/options';
import { ToolFailure, ToolRequest, ToolResult } from './call';

export interface Tool<T> {
  /**
   * Type of option that enables or disables this for a topic.
   */
  enableOption: OptionType<ToggleOption>;

  /**
   * Name of the tool. This is visible to LLMs, but not users.
   */
  name: string;

  /**
   * Description of the tool for LLM purposes. If the LLM doesn't need to know
   * something, put it to comments instead.
   */
  description: string;

  /**
   * Schema for telling LLM about function arguments and validating them.
   */
  argsSchema: JSONSchemaType<T>;

  preHandler: (args: T) => Promise<ToolRequest>;

  /**
   * Handles a tool call done by LLM.
   * @param args Tool arguments (generated by LLM).
   * @returns Tool result.
   */
  handler: (args: T) => Promise<ToolResult | ToolFailure>;
}

const tools: Map<string, Tool<unknown>> = new Map();

export function registerTool<T>(options: Tool<T>): void {
  const tool: Tool<T> = { ...options };
  tools.set(tool.name, tool as Tool<unknown>);
}

export function getTools(): ReadonlyMap<string, Tool<unknown>> {
  return tools;
}

export function getTool(name: string): Tool<unknown> {
  const tool = tools.get(name);
  if (!tool) {
    throw new Error(`no tool found: ${name}`);
  }
  return tool;
}
